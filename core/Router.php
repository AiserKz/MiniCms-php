<?php 

namespace Core;

class Router {
    private $routes = [];

    public function get($uri, $action, $options = []) {
        $this->routes['GET'][$uri] = [
            'action' => $action,
            'middleware' => $options['middleware'] ?? null
        ];
    }

    public function post($uri, $action, $options = []) {
        $this->routes['POST'][$uri] = [
            'action' => $action,
            'middleware' => $options['middleware'] ?? null
        ];
    }

    public function dispatch($uri) {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method === 'POST') {
            if (!verify_csrf_token($_POST['csrf_token'] ?? '') ) {
                flash_modal('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω CSRF', 'error', 419);
            }   
        }
        if (!isset($this->routes[$method])) {
            flash_modal('–ú–µ—Ç–æ–¥ ' . $method . ' –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω', 'error', 422);
        }

        foreach ($this->routes[$method] as $route => $info) {
            $action = $info['action'];
            $middleware = $info['middleware'];

            // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º /post/{id} ‚Üí —Ä–µ–≥—É–ª—è—Ä–∫—É: /post/(\w+)
            $pattern = preg_replace('#\{[a-zA-Z_]+\}#', '([a-zA-Z0-9-_]+)', $route);
            $pattern = "#^" . $pattern . "$#";

            if (preg_match($pattern, $uri, $matches)) { // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º –≤ —Å—Ç—Ä–æ–∫–µ. –û–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 1, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, 0, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–ª–∏ false, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. 
                array_shift($matches); // —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, —Ç.–∫. –æ–Ω –≤—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ–π
                list($controllerName, $methodName) = explode('@', $action);

                // üõ°Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º middleware –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
                if ($middleware) {
                    foreach ((array) $middleware as $mw) {
                        $mwClass = 'Middleware\\' . ucfirst($mw) . 'Middleware';

                        if (class_exists($mwClass)) {
                            $mwClass::handle();
                        } else {
                            flash_modal('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ middleware', 'error', 500);
                            exit;
                        }


                    }
                }
                try {
                    require_once "../controllers/{$controllerName}.php";
                } catch (\Throwable $th) {
                    flash_modal('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞', 'error', 500);
                }
                $controller = new $controllerName();
                return call_user_func_array([$controller, $methodName], $matches); // –í—ã–∑—ã–≤–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            }
        }

        flash_modal('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...', 'error', 404);
    }
}